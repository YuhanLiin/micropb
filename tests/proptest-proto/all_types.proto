syntax = "proto3";

//message EmptyMessage {}


message SubM {
    int32 n = 1;
}

enum TestEnum {
    UNDEFINED = 0;
    RED = 1;
    BLUE = 2;
    GREEN = 3;
}

message TestTypesSingular1 {
    double double_field = 1;
    float float_field = 2;
    int32 int32_field = 3;
    int64 int64_field = 4;
    uint32 uint32_field = 5;
    uint64 uint64_field = 6;
    sint32 sint32_field = 7;
    sint64 sint64_field = 8;
}

message TestTypesSingular2 {
    fixed32 fixed32_field = 9;
    fixed64 fixed64_field = 10;
    sfixed32 sfixed32_field = 11;
    sfixed64 sfixed64_field = 12;
    bool bool_field = 13;
    string string_field = 14;
    bytes bytes_field = 15;
    TestEnum enum_field = 16;
    SubM message_field = 17;
}

message TestTypesRepeated1 {
    repeated double double_field = 1;
    repeated float float_field = 2;
    repeated int32 int32_field = 3;
    repeated int64 int64_field = 4;
    repeated uint32 uint32_field = 5;
    repeated uint64 uint64_field = 6;
    repeated sint32 sint32_field = 7;
    repeated sint64 sint64_field = 8;
}

message TestTypesRepeated2 {
    repeated fixed32 fixed32_field = 9;
    repeated fixed64 fixed64_field = 10;
    repeated sfixed32 sfixed32_field = 11;
    repeated sfixed64 sfixed64_field = 12;
    repeated bool bool_field = 13;
    repeated string string_field = 14;
    repeated bytes bytes_field = 15;
    repeated TestEnum enum_field = 16;
    repeated SubM message_field = 17;
}

// All possibe key and value types
message TestTypesMap1 {
    map<uint32, double> double_field = 1;
    map<uint64, float> float_field = 2;
    map<int32, int32> int32_field = 3;
    map<int64, int64> int64_field = 4;
    map<bool, uint32> uint32_field = 5;
    map<string, uint64> uint64_field = 6;
    map<sfixed32, sint32> sint32_field = 7;
    map<sfixed64, sint64> sint64_field = 8;
}

message TestTypesMap2 {
    map<fixed64, fixed32> fixed32_field = 9;
    map<fixed32, fixed64> fixed64_field = 10;
    map<sint64, sfixed32> sfixed32_field = 11;
    map<sint32, sfixed64> sfixed64_field = 12;
    map<uint64, bool> bool_field = 13;
    map<uint32, string> string_field = 14;
    map<uint64, bytes> bytes_field = 15;
    map<uint32, TestEnum> enum_field = 16;
    map<string, SubM> message_field = 17;
}

message TestOneOf {
  oneof inner {
    TestTypesSingular1 singular1 = 1;
    TestTypesRepeated1 repeat1 = 2;
    TestTypesMap1 map1 = 3;
    TestTypesSingular2 singular2 = 4;
    TestTypesRepeated2 repeat2 = 5;
    TestTypesMap2 map2 = 6;
  }
}
